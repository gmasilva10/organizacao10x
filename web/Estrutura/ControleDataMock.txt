# CONTROLE DE DATAMOCK (quando aplicável)
# Última atualização: 2025-08-16 18:40
# Atualização: 2025-08-18 12:28

Objetivo
- Registrar qualquer uso temporário de dados mock antes de integrações reais (ex.: formulários, cards de features com dados).

Formato padrão de registro
- Nome do mock:
- Caminho do arquivo/pasta:
- Data de criação:
- Autor:
- Uso previsto:
- Notas:

Exemplo preenchido
- Nome do mock: users-list
- Caminho: /mocks/users.json
- Data de criação: 13/08/2025
- Autor: DEV
- Uso previsto: simulação de retorno da API Supabase para listagem de usuários
- Notas: remover ao integrar Supabase

Status atual
- Sem mock para Landing v1.0.
- Preparado para Sistema (Fase 1): fixtures de capabilities para QA.

Fixtures — Capabilities (Basic/admin) — payload real
{
  "tenantId": "f203156c-ed09-42d1-9593-86f4b2ee0c81",
  "plan": "basic",
  "role": "admin",
  "limits": { "students": 300, "trainers": 1 },
  "features": {
    "onboarding": { "kanban": true },
    "payments": { "manual": true },
    "reports": { "advanced": false }
  }
}

Fixtures — Capabilities (Enterprise/manager) — payload real
{
  "tenantId": "0f3ec75c-6eb9-4443-8c48-49eca6e6d00f",
  "plan": "enterprise",
  "role": "manager",
  "limits": { "students": 2000, "trainers": 10 },
  "features": {
    "onboarding": { "kanban": true },
    "payments": { "manual": true },
    "reports": { "advanced": false }
  }
}

Eventos — exemplos de payload
- rbac.denied
  { "action": "users.create_trainer" }
- limit.hit
  { "limit": "trainers", "value": 1, "max": 1 }
- feature.used
  { "feature": "users.create_trainer", "email": "novo.trainer.basic@qa.local" }

Fixtures — Students — payloads reais (QA)
- GET /api/students?q=aluno0001.basic@qa.local&page=1&pageSize=20
  → 200 {
    "items": [ { "id":"…","name":"BASIC Aluno 0001","email":"aluno0001.basic@qa.local","status":"active","trainer_id":null } ],
    "page":1, "pageSize":20, "total":299
  }
- POST /api/students { name:"Aluno 301", email:"aluno0301.basic@qa.local" }
  → 422 { "error":"limit_reached", "details": { "limit":"students", "value":300, "max":300 } }
- PATCH /api/students/:id { trainer_id:"<user_id_trainer>" }
  → 200 { "ok": true }
- PATCH /api/students/:id { status:"active" } (trainer do próprio aluno)
  → 200 { "ok": true }
- DELETE /api/students/:id
  → 200 { "ok": true }

Eventos — Students
- feature.used: { "feature":"students.create", "id":"…" }
- feature.used: { "feature":"students.assign_trainer", "id":"…" }
- feature.used: { "feature":"students.update", "id":"…", "status":"active" }
- feature.used: { "feature":"students.delete", "id":"…" }
- rbac.denied: { "action":"students.create" }
- limit.hit: { "limit":"students", "value":300, "max":300 }
Boas práticas
- Toda estrutura mock deve ter tipos TS definidos e isolados (ex.: /mocks).
- Ao migrar para dados reais, remover mocks e registrar o commit aqui.

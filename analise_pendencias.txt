## Status Geral das Pendências (Atualizado em 2025-06-15)

---

### Bloco Zero: Usabilidade Crítica e Fluxo do Usuário

---
**1. Usuário sem Organização Fica Bloqueado**
- **Prioridade:** CRÍTICA
- **Categoria:** Onboarding / Usabilidade
- **Status:** PENDENTE (INVESTIGAÇÃO INICIADA)
- **Descrição:** Um usuário que, por qualquer motivo, não está associado a uma organização, recebe o aviso "Associação de organização não encontrada" ao tentar usar funcionalidades essenciais (como "Novo Cliente"), mas não recebe nenhuma orientação sobre como resolver o problema (criar ou entrar em uma organização). Isso representa um beco sem saída no fluxo do usuário.
- **Próximo Passo:** Iniciar análise do fluxo de registro e login para identificar a causa raiz e propor uma solução (ex: um modal de criação de organização, redirecionamento para uma página de "Complete seu perfil", etc.).

---

Nesta sessão, uma tarefa aparentemente simples de ajustar a lógica de período de um serviço desencadeou uma análise profunda e uma série de correções críticas em toda a aplicação, resultando em um sistema significativamente mais robusto, seguro e consistente.

### Funcionalidade Implementada:

- **Recálculo do Período de Serviço:** Implementada a lógica no formulário de edição para que, ao alterar a "Data de Pagamento" ou a "Duração do Serviço (em dias)", o período completo do serviço (`client_service_start_date` e `client_service_end_date`) seja recalculado e atualizado corretamente no banco de dados.

### Análise e Correções Críticas (Fase 1 - Banco de Dados):

1.  **Vulnerabilidade de Segurança Resolvida (CRÍTICA):**
    - **Diagnóstico:** A Row-Level Security (RLS) estava desabilitada em todas as tabelas principais, permitindo que usuários de uma organização pudessem, teoricamente, acessar dados de outras.
    - **Correção:** A RLS foi ativada em todas as tabelas sensíveis (`clients`, `organizations`, `client_services`, etc.) e foram criadas políticas de segurança granulares para garantir que um usuário só possa ler/escrever dados pertencentes à sua própria organização.

2.  **Falha de Design de Dados Resolvida (GRAVE):**
    - **Diagnóstico:** A coluna `client_email` possuía uma restrição de unicidade global, impedindo que duas organizações diferentes cadastrassem um cliente com o mesmo e-mail.
    - **Correção:** A constraint foi substituída por um índice único composto por `(organization_id, client_email)`, garantindo a unicidade do e-mail apenas no escopo de uma mesma organização.

3.  **Limpeza de Schema (MENOR):**
    - **Diagnóstico:** A coluna `duration_months` na tabela `service_catalog` estava obsoleta.
    - **Correção:** A coluna foi removida do banco de dados para manter a consistência do schema.

### Análise e Correções (Fase 2 - Código Frontend):

1.  **Validação da Configuração do Cliente Supabase:**
    - **Análise:** Foi confirmado que o cliente Supabase (`src/integrations/supabase/client.ts`) está configurado corretamente para persistir a sessão de autenticação, o que é essencial para o funcionamento da RLS.

2.  **Limpeza de Código Legado:**
    - **Análise:** Foram encontradas múltiplas referências à coluna `duration_months` no código do frontend, o que causaria erros.
    - **Correção:** Todas as menções e lógicas associadas a `duration_months` foram removidas dos seguintes arquivos, sincronizando o frontend com o banco de dados:
        - `src/hooks/useRealServices.ts`
        - `src/components/cadastro/ServicesTable.tsx`
        - `src/components/cadastro/ServiceForm.tsx`

---

## Status Geral das Pendências (Atualizado em 2025-06-14)

---
Este documento foi revisado e validado para refletir o estado atual do projeto. As tarefas foram reclassificadas e re-priorizadas com base em validações recentes.

## Bloco 1: Correções e Funcionalidades Essenciais (Prioridade Alta)

---
**1. Salvar Edição de Serviço do Cliente (Colaborador/Data Pgto)**
- **Prioridade:** CRÍTICA
- **Categoria:** Cadastro de Clientes / Edição
- **Status:** CONCLUÍDO (VALIDADO EM 15/06)
- **Descrição:** A funcionalidade de edição do serviço foi o foco principal desta sessão. A lógica para salvar a data de pagamento e recalcular o período do serviço com base na nova duração em dias foi totalmente implementada, depurada e validada.
- **Notas:** A causa raiz de múltiplos problemas foi rastreada até colunas inexistentes (`duration_days`) e dados ausentes no hook (`useRealClients`), ambos corrigidos.

---
**2. Erro 406 na Busca de Configurações da Organização**
- **Prioridade:** Alta
- **Categoria:** Cadastro de Clientes / Backend
- **Status:** PENDENTE (CONFIRMADO)
- **Descrição:** Durante o `onSubmit` do formulário de criação de cliente, a query `GET .../rest/v1/organization_settings?...setting_key=eq.default_m0_reference` retorna um erro 406 (Not Acceptable).
- **Notas:** Embora o formulário tenha um fallback que impede o crash, o erro de requisição precisa ser investigado e corrigido (provavelmente relacionado a RLS ou configuração do PostgREST).

---
**3. Data de Início do Serviço no Cadastro**
- **Prioridade:** Média
- **Categoria:** Cadastro de Clientes / Lógica de Negócio
- **Status:** PENDENTE (A VERIFICAR MANUALMENTE)
- **Descrição:** A lógica de cadastro de um novo serviço para um cliente parece usar sempre a data atual (`new Date()`) como data de início, ignorando a "Data do Pagamento" inserida no formulário.
- **Próximo Passo:** Requer inspeção do código na função `onSubmit` do `ClientForm.tsx` ou verificação direta no banco de dados para confirmar qual data está sendo persistida em `client_service_start_date`.

---
**4. Warnings de Acessibilidade nos Modais (Dialogs)**
- **Prioridade:** Baixa
- **Categoria:** Acessibilidade / UI
- **Status:** PENDENTE (CONFIRMADO)
- **Descrição:** Vários componentes de diálogo (`DialogContent`) na aplicação estão gerando o warning "Missing `Description` or `aria-describedby={undefined}`", o que prejudica a acessibilidade.
- **Próximo Passo:** Revisar os componentes de diálogo (ex: `ClientForm`, `EditClientDialog`) e adicionar os componentes `<DialogDescription>` ou as `props` `aria-describedby` necessárias.

---

## Bloco 2: Funcionalidades Futuras e Melhorias (Prioridade Média/Baixa)

---
**5. Implementar Módulo de Análise (Antigo Dashboard)**
- **Prioridade:** Média
- **Categoria:** Análise / Dashboard
- **Status:** PENDENTE (EM DESENVOLVIMENTO INICIAL)
- **Descrição:** A tela `/analise` foi criada, mas as métricas principais (LTV, Retenção) estão quebradas (exibindo `NaN`), e funcionalidades essenciais como filtros de período, gráficos dinâmicos e seções de tarefas/notificações estão ausentes.
- **Próximo Passo:** Desenvolver a lógica de cálculo para as métricas, implementar os filtros e conectar os componentes visuais aos dados reais.

---
**6. Implementar Lógica de Renovação vs. Retorno**
- **Prioridade:** Média
- **Categoria:** Lógica de Negócio / Serviços
- **Status:** PENDENTE
- **Descrição:** Definir e implementar a lógica de negócio para diferenciar uma "Renovação" de um "Retorno" de plano.
- **Notas:** A regra sugerida é: se um aluno compra um novo plano >30 dias após o término do anterior, é "Retorno". É preciso definir como armazenar e exibir essa informação.

---
**7. Atualização de Senha do Usuário**
- **Prioridade:** Média
- **Categoria:** Segurança / Configurações de Usuário
- **Status:** PENDENTE
- **Descrição:** A funcionalidade de atualização de senha na tela de perfil (`ProfileTab.tsx`) precisa ser conectada ao backend (Supabase Auth).

---
**8. Templates de Onboarding**
- **Prioridade:** Alta (Feature Principal)
- **Categoria:** Onboarding
- **Status:** PENDENTE
- **Descrição:** Desenvolver a funcionalidade de templates de onboarding, permitindo a criação de fluxos de tarefas padronizados para novos clientes.

---
**9. Modelos de Mensagem Padrão (Relacionamento)**
- **Prioridade:** Média
- **Categoria:** Relacionamento / Conteúdo
- **Status:** PENDENTE
- **Descrição:** Criar uma funcionalidade para que o personal trainer possa salvar e reutilizar modelos de mensagem para se comunicar com os alunos em diferentes estágios.

---
**10. Gestão de Colaboradores**
- **Prioridade:** Média (Longo Prazo)
- **Categoria:** Colaboradores / Acesso
- **Status:** PENDENTE
- **Descrição:** Desenvolver a interface para cadastro e gerenciamento de colaboradores, associando-os a uma organização e definindo suas permissões.

---
**11. Melhoria: Reforçar Tipagem de Dados (last_sale)**
- **Prioridade:** Baixa
- **Categoria:** Refatoração / Manutenibilidade
- **Status:** PENDENTE (NOVA TAREFA)
- **Descrição:** O objeto `last_sale` no hook `useRealClients` e o `client` no `ClientForm` dependem de uma estrutura implícita. Para evitar bugs futuros, criar uma interface explícita para `last_sale` em `src/types/index.ts` e usá-la em todo o fluxo de dados (hooks, componentes) pode aumentar a robustez.

---

## Bloco 3: Tarefas Concluídas ou em Revisão

---
**12. Personalização da Tabela de Alunos**
- **Prioridade:** Média
- **Categoria:** Cadastro de Alunos / UI
- **Status:** CONCLUÍDO (VALIDADO EM 14/06)
- **Descrição:** A funcionalidade de escolher colunas visíveis na tabela de clientes (`/cadastro`) foi implementada e está funcionando.

---
**13. Warning de `key` duplicada em `ServicesTable.tsx`**
- **Prioridade:** Baixa
- **Categoria:** UI / Serviços
- **Status:** A REVISAR (Não Reproduzido)
- **Descrição:** O warning de `key` duplicada não foi observado durante a navegação recente. Pode ter sido corrigido indiretamente. Manter em observação.

---
**14. Atraso de diagnóstico no `authService.ts`**
- **Prioridade:** Baixa
- **Categoria:** Performance / Refatoração
- **Status:** PENDENTE (Pós-Estabilização)
- **Descrição:** Avaliar a remoção do `setTimeout` de 2 segundos usado para diagnóstico no serviço de autenticação.

## Pendências do Dashboard e Decisões da Reunião

---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Baixa (Revisar propósito do Dashboard inicial)
Categoria: Dashboard - Geral
Status: A Revisar
Descrição: Dashboard inicial (com métricas de faturamento, etc.) será movido/integrado ao módulo de Análise. Onboarding é a nova página inicial.
Notas: `useDashboardMetrics.ts` foi corrigido. Dashboard carrega. Validação da exatidão dos dados para o módulo de Análise.
---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Média (quando o módulo de Análise for desenvolvido)
Categoria: Dashboard - Gráficos
Status: A Verificar
Descrição: Testar se o gráfico "Produtividade do Relacionamento" usa dados dinâmicos e se filtros funcionam.
---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Média (quando o módulo de Análise for implementado com estas seções)
Categoria: Dashboard - Funcionalidade
Status: A Verificar
Descrição: Verificar interatividade dos filtros de período/status nas seções "Produtividade do Relacionamento", "Tarefas Pendentes" e "Notificações" (se mantidas no módulo de Análise).
---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Média (quando o módulo de Análise for implementado com estas seções)
Categoria: Dashboard - Funcionalidade
Status: A Verificar
Descrição: Avaliar comportamento dos botões "Ver todas" (se mantidos no módulo de Análise).
---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Média
Categoria: Navegação Geral
Status: **Concluído** 
Descrição: Confirmar se todos os links no menu de navegação principal (Dashboard, Cadastros, Onboarding, etc.) estão funcionais e se as páginas carregam.
Notas: Navegação principal testada e funcional. Onboarding é a inicial.
---

## Novas Pendências / Tarefas Prioritárias (Pós-Reunião e Sessão Atual)

---
Prioridade: Alta
Categoria: Navegação / Estrutura da Aplicação
Status: **Concluído**
Descrição: Implementar Onboarding como a página inicial da aplicação após login.
---
Prioridade: Alta
Categoria: Cadastro de Clientes / Serviços
Status: **Concluído**
Descrição: Testar completamente a criação de cliente COM serviço, incluindo a lógica "on-the-fly" no `service_catalog`.
Notas: `ClientForm.tsx` cria entrada em `service_catalog` e `client_services`. Seleção de serviço, atualização de valor e nome na UI do formulário, e salvamento no banco foram corrigidos e validados.
---
Prioridade: Alta
Categoria: Cadastro de Clientes / Serviços
Status: **Concluído** 
Descrição: Refinar lógica de `serviceDetailsMap` no `ClientForm.tsx`. Substituir mapa estático por busca dinâmica no `service_catalog` para popular o dropdown de "Serviço contratado" e preencher campos relacionados (nome, preço, duração) ao selecionar um serviço existente. Permitir também a definição de um novo tipo de serviço (ID textual) que seria adicionado ao catálogo.
Notas: Busca dinâmica e preenchimento de campos relacionados implementados em `ClientServiceInfoStep.tsx`.
---
Prioridade: Alta
Categoria: Onboarding
Status: A Fazer
Descrição: Desenvolver a funcionalidade de **Templates de Onboarding**: um padrão automatizado e opção para fluxo personalizado (não automatizado).
Notas: Definir estrutura do Kanban, etapas padrão.
---
Prioridade: Média
Categoria: Tipagem / Frontend
Status: **Concluído**
Descrição: Ajustar Interface `Service` em `@/types/index.ts` para corresponder às colunas reais da tabela `service_catalog`.
Notas: Verificado implicitamente durante correções de busca de serviço.
---
Prioridade: Média
Categoria: Configurações de Usuário / Perfil
Status: **Concluído** 
Descrição: Validar a exibição e edição de dados na tela de Perfil (`src/components/configuracoes/ProfileTab.tsx`) após correções (nome, email, telefone, organização).
---
Prioridade: Alta
Categoria: Cadastro de Clientes / Perfil do Cliente
Status: **Concluído**
Descrição: Implementar a exclusão de cliente com diálogo de confirmação, chamada ao Supabase para deletar da tabela `clients` (com `ON DELETE CASCADE` para registros relacionados), feedback ao usuário e redirecionamento.
Notas: Implementado em `ClientProfile.tsx` e `ConfirmDeleteClientDialog.tsx`. Funcionalidade validada.
---
Prioridade: Alta
Categoria: Cadastro de Clientes / Perfil do Cliente
Status: **Concluído**
Descrição: Implementar a edição das informações pessoais do cliente (Nome, Email, Telefone, Data Nasc., Cidade, Estado, Nível de Atenção, Observações; CPF não editável) através de um modal, com pré-preenchimento, chamada `update` ao Supabase, feedback e atualização automática da UI no perfil.
Notas: Implementado em `ClientProfile.tsx` e `EditClientDialog.tsx`. Atualização automática da UI no perfil após edição (incluindo Nível de Atenção) foi corrigida e validada.
---
Prioridade: Média
Categoria: Cadastro de Clientes / UI
Status: **Concluído**
Descrição: Garantir que o indicador visual (quadradinho colorido) na lista de alunos (`ClientsTable.tsx` / `ClientNameLink.tsx`) reflita corretamente o Nível de Atenção do cliente e atualize após a edição.
Notas: Corrigida a lógica em `getAttentionLevelColor/Label` em `ClientNameLink.tsx` e em `getAttentionLevel` no hook `useRealClients.ts`. Atualização na lista validada.
---
Prioridade: Média
Categoria: Lógica de Negócio / Serviços
Status: A Fazer
Descrição: Implementar lógica de **Renovação vs. Retorno** de planos.
Notas: Se um aluno compra novo plano >30 dias após o término do anterior, é "Retorno". Definir como armazenar/exibir essa distinção.
---
Prioridade: Média
Categoria: Cadastro de Alunos / UI
Status: A Fazer
Descrição: Implementar **personalização da tabela de cadastro de alunos** (permitir ao usuário escolher colunas visíveis).
---
Prioridade: Média
Categoria: Relacionamento / Conteúdo
Status: A Fazer
Descrição: Criar funcionalidade para **Modelos de Mensagem Padrão** (semanas 1-4 de treino) e permitir que o personal crie/customize os seus.
---
Prioridade: Média (Longo Prazo)
Categoria: Cadastro / Integrações
Status: A Fazer
Descrição: Investigar e implementar **integração com Eduzz** para importar automaticamente dados de novos alunos após pagamento.
---
Prioridade: Média (Longo Prazo)
Categoria: Colaboradores / Acesso
Status: A Fazer
Descrição: Desenvolver funcionalidade para **cadastro e gerenciamento de Colaboradores** dentro de uma Organização, com controle de permissões.
Notas: Estrutura de banco (`organization_members` com roles) já é um começo.
---
Prioridade: Baixa 
Categoria: Cadastro de Clientes / Backend
Status: A Fazer
Descrição: A query `GET .../rest/v1/organization_settings?...setting_key=eq.default_m0_reference` está retornando 406 (Not Acceptable) durante o `onSubmit` do `ClientForm.tsx`. Investigar causa (RLS, PostgREST config) e corrigir.
Notas: O `ClientForm.tsx` tem um fallback para `defaultM0Reference = 'payment'`. Erro observado durante testes de cadastro.
---
Prioridade: Baixa
Categoria: Performance / Refatoração
Status: A Fazer (Pós-Estabilização)
Descrição: Avaliar e possivelmente remover atraso de diagnóstico de 2s no `authService.ts` se a estabilidade for confirmada.
---
Prioridade: Média
Categoria: Segurança / Configurações de Usuário
Status: A Fazer
Descrição: Implementar a chamada real ao Supabase para atualização de senha no `ProfileTab.tsx`.
---
Prioridade: Baixa
Categoria: Acessibilidade / UI
Status: A Fazer
Descrição: Corrigir warnings "Missing `Description` or `aria-describedby={undefined}` for {DialogContent}" para melhorar acessibilidade dos modais.
---
Prioridade: Baixa (Longo Prazo)
Categoria: Relacionamento / Integrações
Status: A Fazer
Descrição: Investigar e implementar integração com WhatsApp para comunicação com alunos.
---
Prioridade: Baixa
Categoria: UI / Serviços
Status: A Fazer
Descrição: Corrigir warning de `key` duplicada em `ServicesTable.tsx`. Provavelmente precisa usar `service_id` como chave ao mapear os serviços na tabela de listagem de serviços.
---
Prioridade: Média
Categoria: Cadastro de Clientes / Lógica de Negócio
Status: A Fazer
Descrição: A data de início (`client_service_start_date`) do serviço no cadastro do cliente é sempre a data atual (`new Date()`), e não utiliza a "Data do Pagamento" inserida no formulário. Revisar e alinhar essa lógica para que a data de início do serviço possa ser definida ou baseada na data de pagamento.
---

## Pendências do Dashboard (Verificação Original)

---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Alta
Categoria: Dashboard - Métricas
Status: Parcialmente Verificado/A Fazer
Descrição: Confirmar se os valores nos cards de métricas (Alunos Ativos, Faturamento, etc.) são dinâmicos e refletem dados reais do backend.
Notas: Hook `useDashboardMetrics.ts` corrigido para usar `created_at`. Dashboard carrega. Exatidão e dinamismo dos valores (especialmente faturamento, renovações, cancelamentos) ainda precisam ser validados com dados reais.
---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Média
Categoria: Dashboard - Navegação
Status: **Concluído** 
Descrição: Confirmar se todos os links no menu de navegação principal (Dashboard, Cadastros, Onboarding, etc.) estão funcionais.
Notas: Navegação principal testada e funcional.
---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Baixa
Categoria: Dashboard - Consistência de Dados
Status: A Verificar
Descrição: Analisar diferença entre contador de notificações no header e total na seção "Notificações".
---
Data: 2025-05-30 (Original) / Atualizado: 2025-06-03
Prioridade: Média
Categoria: Dashboard - Tarefas
Status: A Verificar
Descrição: Verificar se a mensagem "Não há tarefas para os filtros selecionados" em "Tarefas Pendentes" é correta.
--- 